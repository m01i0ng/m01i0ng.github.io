<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://m01i0ng.js.org</id>
    <title>Untitled</title>
    <updated>2020-08-14T02:43:51.087Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://m01i0ng.js.org"/>
    <link rel="self" href="https://m01i0ng.js.org/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://m01i0ng.js.org/images/avatar.png</logo>
    <icon>https://m01i0ng.js.org/favicon.ico</icon>
    <rights>All rights reserved 2020, Untitled</rights>
    <entry>
        <title type="html"><![CDATA[使用 Golang 构建一个简单地 TCP 服务]]></title>
        <id>https://m01i0ng.js.org/2SxOltbTK/</id>
        <link href="https://m01i0ng.js.org/2SxOltbTK/">
        </link>
        <updated>2020-08-14T02:43:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="使用-golang-构建一个简单地-tcp-服务">使用 Golang 构建一个简单地 TCP 服务</h1>
<p>Golang 原生的协程使其在处理高并发方面很有优势，下面使用 Go 来简单实现个支持并发的 TCP 服务器</p>
<h2 id="首先实现客户端">首先实现客户端</h2>
<p>首先定义针对客户端的结构体，包含连接、地址和一个用来接收停止信号的 chan</p>
<pre><code class="language-go">type client struct {
	connection *net.Conn
	addr       *net.TCPAddr
	stopChan   chan struct{}
}
</code></pre>
<p>然后为其定义数据处理方法，handler</p>
<pre><code class="language-go">func (c *client) handler() {
	defer c.connection.Close()
	//根据连接初始化 reader
	reader := bufio.NewReader(c.connection)
	//阻塞，读取数据
	for {
		buf := make([]byte, 1024)
		//n 为读取到的数据长度
		n, err := reader.Read(buf)
		if err != nil {
			if err == io.EOF {
				//如果是 EOF 代表已经失去客户端连接，在这里直接释放这个 client
				close(c.stopChan)
				break
			}
			golog.Errorf(&quot;read error: %v&quot;, err)
			continue
		}
		bytes := buf[:n]
		golog.Infof(&quot;recv: %s&quot;, bytes)
		//直接将发送过来的数据回写
		_, err = c.connection.Write(bytes)
		if err != nil {
			golog.Errorf(&quot;write error: %v&quot;, err)
			continue
		}
	}
}
</code></pre>
<p>完整代码如下</p>
<pre><code class="language-go">package main

import (
	&quot;bufio&quot;
	&quot;io&quot;
	&quot;net&quot;

	&quot;github.com/kataras/golog&quot;
)

type client struct {
	connection *net.TCPConn
	addr       *net.TCPAddr
	stopChan   chan struct{}
}

func (c *client) handler() {
	defer c.connection.Close()
	//根据连接初始化 reader
	reader := bufio.NewReader(c.connection)
	//阻塞，读取数据
	for {
		buf := make([]byte, 1024)
		//n 为读取到的数据长度
		n, err := reader.Read(buf)
		if err != nil {
			if err == io.EOF {
				//如果是 EOF 代表连接断开，在这里直接释放这个 client
				close(c.stopChan)
				break
			}
			golog.Errorf(&quot;read error: %v&quot;, err)
			continue
		}
		bytes := buf[:n]
		golog.Infof(&quot;recv: %s&quot;, bytes)
		//直接将发送过来的数据回写
		_, err = c.connection.Write(bytes)
		if err != nil {
			golog.Errorf(&quot;write error: %v&quot;, err)
			continue
		}
	}
}

func main() {
	//建立 TCP 连接
	addr, err := net.ResolveTCPAddr(&quot;tcp&quot;, &quot;127.0.0.1:8000&quot;)
	if err != nil {
		golog.Fatalf(&quot;resolve addr error: %v&quot;, err)
	}

	conn, err := net.DialTCP(&quot;tcp&quot;, nil, addr)
	if err != nil {
		golog.Fatalf(&quot;dial tcp error: %v&quot;, err)
	}

	client := &amp;client{
		connection: conn,
		addr:       addr,
		stopChan:   make(chan struct{}),
	}

	//开启协程处理
	go client.handler()

	//开启 channel 等待，当 chan 被关闭时退出
	&lt;-client.stopChan
}
</code></pre>
<h2 id="实现服务端">实现服务端</h2>
<p>封装服务端结构体，包含 listener 和 addr</p>
<pre><code class="language-go">type server struct {
	listener *net.TCPListener
	addr     *net.TCPAddr
}
</code></pre>
<p>定义连接处理方法</p>
<pre><code class="language-go">//处理方法
func handle(conn net.Conn) {
	defer conn.Close()
	golog.Infof(&quot;new client: %s&quot;, conn.RemoteAddr().String())
	reader := bufio.NewReader(conn)
	for {
		buf := make([]byte, 1024)
		n, err := reader.Read(buf)
		if err != nil {
			if err == io.EOF {
				golog.Errorf(&quot;client closed: %s&quot;, conn.RemoteAddr().String())
				return
			}
			continue
		}
		//回写
		conn.Write(buf[:n])
	}
}
</code></pre>
<p>建立连接，完整代码如下</p>
<pre><code class="language-go">package main

import (
	&quot;bufio&quot;
	&quot;io&quot;
	&quot;net&quot;

	&quot;github.com/kataras/golog&quot;
)

type server struct {
	listener *net.TCPListener
	addr     *net.TCPAddr
}

//处理方法
func handle(conn net.Conn) {
	//此处可定义状态机，处理连接的不同状态和数据包结构
	defer conn.Close()
	golog.Infof(&quot;new client: %s&quot;, conn.RemoteAddr().String())
	reader := bufio.NewReader(conn)
	for {
		buf := make([]byte, 1024)
		n, err := reader.Read(buf)
		if err != nil {
			if err == io.EOF {
				golog.Errorf(&quot;client closed: %s&quot;, conn.RemoteAddr().String())
				return
			}
			continue
		}
		//回写
		conn.Write(buf[:n])
	}
}

func main() {
	//建立连接
	addr, err := net.ResolveTCPAddr(&quot;tcp&quot;, &quot;:8000&quot;)
	if err != nil {
		golog.Fatalf(&quot;resolve addr error: %v&quot;, err)
	}
	listener, err := net.ListenTCP(&quot;tcp&quot;, addr)
	if err != nil {
		golog.Fatalf(&quot;listen error: %v&quot;, err)
	}
	defer listener.Close()

	//构造 server 对象
	s := &amp;server{
		listener: listener,
		addr:     addr,
	}

	for {
		conn, err := s.listener.Accept()
		if err != nil {
			continue
		}
		//进入协程处理该连接
		go handle(conn)
	}
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot 配置使用 Redis 缓存 Json 值]]></title>
        <id>https://m01i0ng.js.org/mNqBPPh6J/</id>
        <link href="https://m01i0ng.js.org/mNqBPPh6J/">
        </link>
        <updated>2020-08-11T09:42:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="spring-boot-使用-redis-缓存">Spring Boot 使用 Redis 缓存</h1>
<h2 id="首先引入依赖">首先引入依赖</h2>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="配置-redis-并开启缓存">配置 Redis 并开启缓存</h2>
<pre><code class="language-java">@Configuration
@EnableCaching
@AutoConfigureAfter(RedisAutoConfiguration.class)
public class RedisCacheConfig extends CachingConfigurerSupport {

    @Resource
    private Jackson2ObjectMapperBuilder builder;

    @Bean
    public RedisTemplate&lt;String, Serializable&gt; redisTemplate(LettuceConnectionFactory factory) {
        RedisTemplate&lt;String, Serializable&gt; template = new RedisTemplate&lt;&gt;();
        template.setConnectionFactory(factory);
        template.setKeySerializer(new StringRedisSerializer());
        template.setValueSerializer(new Jackson2JsonRedisSerializer&lt;&gt;(Serializable.class));
        template.afterPropertiesSet();

        return template;
    }
}
</code></pre>
<p>此时即可使用相关缓存注解</p>
<pre><code>@Cacheable
@CachePut
@CacheEvict
</code></pre>
<pre><code class="language-java">@ApiOperation(&quot;根据 ID 获取&quot;)
@GetMapping(&quot;/{id}&quot;)
@Cacheable(value = &quot;company&quot;, key = &quot;#id&quot;)
public CompanyVO getById(@PathVariable Long id) {
    return companyConverter.companyToCompanyVO(companyService.getById(id));
}

@ApiOperation(&quot;根据 ID 修改&quot;)
@PutMapping(&quot;/{id}&quot;)
@CacheEvict(value = &quot;company&quot;, key = &quot;#id&quot;, beforeInvocation = true)
public void updateById(@PathVariable Long id, @RequestBody CompanyDTO companyDTO) {
    Company company = companyConverter.companyDTOToCompany(companyDTO);
    company.setId(id);
    companyService.updateById(company);
}

@ApiOperation(&quot;根据 ID 删除&quot;)
@DeleteMapping(&quot;/{id}&quot;)
@CacheEvict(value = &quot;company&quot;, key = &quot;#id&quot;, beforeInvocation = true)
public void deleteById(@PathVariable Long id) {
    companyService.removeById(id);
}
</code></pre>
<p>Redis 中生成的缓存为 <code>company::#id</code> 比如 <code>company::44</code>，如需更改键生成策略则需要自定义 <code>KeyGenerator</code> 复写其生成逻辑。<br>
但此时我们看到 Redis 中存储的为二进制格式，如遇到问题不方便排查，我们可以自定义 <code>CacheManager</code> 来修改值为 Json 存储</p>
<h2 id="配置-redis-中值存储为-json">配置 Redis 中值存储为 Json</h2>
<p><code>RedisConfig</code> 类中新增如下逻辑</p>
<pre><code class="language-java">@Configuration
@EnableCaching
@AutoConfigureAfter(RedisAutoConfiguration.class)
public class RedisCacheConfig extends CachingConfigurerSupport {

    @Resource
    private Jackson2ObjectMapperBuilder builder;

    @Bean
    public RedisTemplate&lt;String, Serializable&gt; redisTemplate(LettuceConnectionFactory factory) {
        RedisTemplate&lt;String, Serializable&gt; template = new RedisTemplate&lt;&gt;();
        template.setConnectionFactory(factory);
        template.setKeySerializer(new StringRedisSerializer());
        template.setValueSerializer(new Jackson2JsonRedisSerializer&lt;&gt;(Serializable.class));
        template.afterPropertiesSet();

        return template;
    }

    @Bean
    public RedisCacheManager cacheManager(LettuceConnectionFactory factory) {
        Jackson2JsonRedisSerializer&lt;Serializable&gt; serializer = new Jackson2JsonRedisSerializer&lt;&gt;(Serializable.class);
        ObjectMapper objectMapper = builder.build();
        objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL,
                JsonTypeInfo.As.PROPERTY);

        serializer.setObjectMapper(objectMapper);

        RedisCacheConfiguration configuration = RedisCacheConfiguration.defaultCacheConfig()
                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(serializer));

        return RedisCacheManager.builder(factory).cacheDefaults(configuration).build();
    }
}
</code></pre>
<p>同时需要再引入 Jackson 依赖使其能进行时间日期的序列化</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.fasterxml.jackson.datatype&lt;/groupId&gt;
    &lt;artifactId&gt;jackson-datatype-jsr310&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p>配置文件中加入</p>
<pre><code class="language-yaml">spring:
  jackson:
    serialization:
      write-dates-as-timestamps: false
</code></pre>
<p>此时再看 Redis 中生成的缓存值</p>
<figure data-type="image" tabindex="1"><img src="https://8023-1251563214.cos.ap-beijing.myqcloud.com/uPic/IMG_7089.PNG" alt="IMG_7089" loading="lazy"></figure>
<p>大功告成！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Postman 使用 pre-request 脚本自动申请验证 Token]]></title>
        <id>https://m01i0ng.js.org/jlZagNwqS/</id>
        <link href="https://m01i0ng.js.org/jlZagNwqS/">
        </link>
        <updated>2020-06-05T05:19:55.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>首先新建一个 <strong>Collection</strong>，定义一个变量 <code>token</code> 来存储</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://8023-1251563214.cos.ap-beijing.myqcloud.com/uPic/CleanShot%202020-06-05%20at%2013.26.44.png" alt="CleanShot2020-06-05at13.26.44" loading="lazy"></figure>
<ol start="2">
<li>然后下面新建两个子 <strong>Collection</strong>，分别存储需要验证和不需要验证的 Api 接口</li>
</ol>
<figure data-type="image" tabindex="2"><img src="https://8023-1251563214.cos.ap-beijing.myqcloud.com/uPic/XLu3I6.png" alt="XLu3I6" loading="lazy"></figure>
<ol start="3">
<li>编辑 <strong>需要验证</strong> 的文件夹，添加验证方法 <strong>Bearer Token</strong></li>
</ol>
<figure data-type="image" tabindex="3"><img src="https://8023-1251563214.cos.ap-beijing.myqcloud.com/uPic/ZYN5RA.png" alt="ZYN5RA" loading="lazy"></figure>
<ol start="4">
<li><strong>Pre-request Scripts</strong> 下编写脚本发送验证请求</li>
</ol>
<pre><code class="language-js">pm.sendRequest({
    url: pm.collectionVariables.get('base-url') + '/auth/oauth/token', // 登录获取 Token 接口
    method: 'POST',
    header: {
        'Content-Type': 'multipart/form-data', // formdata 形式发送(视实际情况而定)
        Authorization: 'Basic YXBwOjEyMzQ1Ng==' // 请求头(视实际情况而定)
    },
    // 下面是请求数据 body
    body: {
        mode: 'formdata',
        formdata: [
            {
                key: 'username',
                value: 'm01i0ng',
                disabled: false,
            },
            {
                key: 'password',
                value: 'secret',
                disabled: false,
            },
            {
                key: 'grant_type',
                value: 'password',
                disabled: false,
            },
            {
                key: 'scope',
                value: 'read',
                disabled: false,
            }
        ]
    }
}, function(err, res) {
    const data = res.json()
    pm.collectionVariables.set('token', data.access_token) // 请求成功之后，调用方法更新 token 变量从而更新 Token
})
</code></pre>
<p>如图：</p>
<figure data-type="image" tabindex="4"><img src="https://8023-1251563214.cos.ap-beijing.myqcloud.com/uPic/buwq2v.png" alt="buwq2v" loading="lazy"></figure>
<ol start="5">
<li><strong>需要验证</strong> 下面新建的所有 Api 接口，验证方式选择 <strong>Inherit auth from parent</strong></li>
</ol>
<figure data-type="image" tabindex="5"><img src="https://8023-1251563214.cos.ap-beijing.myqcloud.com/uPic/QxVZLr.png" alt="QxVZLr" loading="lazy"></figure>
<ol start="6">
<li>尝试执行 Api，现在每次发送请求之前都会自动获取更新 Token，如果有问题可以用 <code>console.log()</code> 配合 Postman 控制台查看输出</li>
</ol>
<figure data-type="image" tabindex="6"><img src="https://8023-1251563214.cos.ap-beijing.myqcloud.com/uPic/6SEIST.png" alt="6SEIST" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter 系列笔记（2）组件和应用生命周期]]></title>
        <id>https://m01i0ng.js.org/CKg-JiPZN/</id>
        <link href="https://m01i0ng.js.org/CKg-JiPZN/">
        </link>
        <updated>2020-05-24T11:12:42.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>除了常见的组件生命周期外，应用本身也存在生命周期</p>
</blockquote>
<h2 id="stateless-无状态组件">Stateless 无状态组件</h2>
<ol>
<li>constructor</li>
<li>build()</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://8023-1251563214.cos.ap-beijing.myqcloud.com/uPic/HxkVhQ.png" alt="HxkVhQ" loading="lazy"></figure>
<h2 id="stateful-有状态组件">Stateful 有状态组件</h2>
<ol>
<li>constructor</li>
<li>initState() 初始化</li>
<li>build()</li>
<li>setState() 改变状态</li>
<li>didUpdateWidget() 更新状态</li>
<li>build()</li>
<li>dispose() 销毁</li>
</ol>
<figure data-type="image" tabindex="2"><img src="https://8023-1251563214.cos.ap-beijing.myqcloud.com/uPic/djvjMy.png" alt="djvjMy" loading="lazy"></figure>
<h2 id="app-应用">App 应用</h2>
<ol>
<li>inactive 刚进入后台</li>
<li>paused 已进入后台</li>
<li>resumed 切换到前台</li>
<li>suspending 被清除前</li>
</ol>
<p>要使用 App 生命周期监听：</p>
<ul>
<li>组件引用 <code>mixin</code></li>
<li>添加 <code>Observer</code></li>
</ul>
<pre><code class="language-dart">class _HomePageState extends State&lt;HomePage&gt; with WidgetsBindingObserver {
...

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    print(state);
  }

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
  }

  @override
  void dispose() {
    super.dispose();
    WidgetsBinding.instance.removeObserver(this);
  }

...
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter 系列笔记（1） 获取屏幕内容区可用高度]]></title>
        <id>https://m01i0ng.js.org/flutter-zhong-huo-qu-ping-mu-ke-yong-gao-du/</id>
        <link href="https://m01i0ng.js.org/flutter-zhong-huo-qu-ping-mu-ke-yong-gao-du/">
        </link>
        <updated>2020-05-22T06:05:52.000Z</updated>
        <content type="html"><![CDATA[<p>首先不管是 Android 还是 iOS 设备，都要考虑各种刘海、水滴屏等等，所以最外层容器要用 <code>SafeArea</code> 包裹，其次要考虑状态栏高度：</p>
<figure data-type="image" tabindex="1"><img src="https://8023-1251563214.cos.ap-beijing.myqcloud.com/uPic/NIH34c.png" alt="NIH34c" loading="lazy"></figure>
<p>如果应用有顶栏，也要考虑顶栏高度：</p>
<figure data-type="image" tabindex="2"><img src="https://8023-1251563214.cos.ap-beijing.myqcloud.com/uPic/Uip3b3.png" alt="Uip3b3" loading="lazy"></figure>
<p>所以最终实际内容可用区域高度为 <code>屏幕高度 - 状态栏高度 - 顶栏高度</code>，即为内容区高度，当然是在有 <code>SafeArea</code> 的前提下，代码如下：</p>
<pre><code class="language-dart">final mediaQuery = MediaQuery.of(context);
final availableHeight = mediaQuery.size.height - appBar.preferredSize.height - mediaQuery.padding.top;
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://8023-1251563214.cos.ap-beijing.myqcloud.com/uPic/Ju4l5i.png" alt="Ju4l5i" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Umi.js 问题总结]]></title>
        <id>https://m01i0ng.js.org/umijs-wen-ti-zong-jie/</id>
        <link href="https://m01i0ng.js.org/umijs-wen-ti-zong-jie/">
        </link>
        <updated>2020-04-22T06:20:17.000Z</updated>
        <content type="html"><![CDATA[<p>使用版本 3.1.1</p>
<h2 id="dva-loading-组件错误处理">dva loading 组件错误处理</h2>
<pre><code class="language-js">// src/app.js
import { notification } from 'antd'
...
export const dva = {
  config: {
    onError(err) {
      err.preventDefault()
      notification.error({
        message: err.message,
      })
    },
  },
}
...
</code></pre>
<h2 id="修改全局滚动条样式">修改全局滚动条样式</h2>
<pre><code class="language-css">// src/global.css
...
/* 滚动槽 */
::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}
::-webkit-scrollbar-track {
  border-radius: 3px;
  background: rgb(18, 52, 83);
  -webkit-box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.08);
}
/* 滚动条滑块 */
::-webkit-scrollbar-thumb {
  border-radius: 3px;
  background: rgb(18, 108, 170);
  -webkit-box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.2);
}
...
</code></pre>
<h2 id="antd-开启中文">antd 开启中文</h2>
<p>antd 默认文案是英文的，中文要手动开启</p>
<pre><code class="language-js">// .umirc.ts
...
  locale: {
    default: 'zh-CN',
    antd: true,
    title: false,
    baseNavigator: true,
    baseSeparator: '-',
  },
...

// src/layouts/index.js
import { ConfigProvider } from 'antd'
import zhCN from 'antd/es/locale/zh_CN'
...
&lt;ConfigProvider locale={zhCN}&gt;{props.children}&lt;/ConfigProvider&gt;
...
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot 中使用 RedisTemplate 进行 scan 操作]]></title>
        <id>https://m01i0ng.js.org/spring-boot-zhong-shi-yong-redistemplate-jin-xing-scan-cao-zuo/</id>
        <link href="https://m01i0ng.js.org/spring-boot-zhong-shi-yong-redistemplate-jin-xing-scan-cao-zuo/">
        </link>
        <updated>2020-04-03T04:22:51.000Z</updated>
        <content type="html"><![CDATA[<p>Redis 中使用 <code>keys *</code> 会获取所有匹配的键，但同时也会锁住整个 redis 造成雪崩，更好的方法是使用 <code>scan</code> 命令，有关介绍 <a href="http://redis.cn/commands/scan.html">看这</a> 不做过多介绍</p>
<h2 id="引入依赖">引入依赖</h2>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="使用">使用</h2>
<pre><code class="language-java">// 注入 RedisTemplate
private final StringRedisTemplate redisTemplate;

// 定义 scan 方法
private Set&lt;String&gt; scan(String pattern) {
    Set&lt;String&gt; keys = Sets.newHashSet();
    RedisConnection connection =redisTemplate.getConnectionFactory().getConnection();
    ScanOptions scanOptions = ScanOptions.scanOptions()
    .match(pattern)
    .count(100)
    .build();
    Cursor&lt;byte[]&gt; cursor = connection.scan(scanOptions);
    while (cursor.hasNext()) {
        keys.add(new String(cursor.next()));
    }

    return keys;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac 软件]]></title>
        <id>https://m01i0ng.js.org/mac-ruan-jian/</id>
        <link href="https://m01i0ng.js.org/mac-ruan-jian/">
        </link>
        <updated>2020-02-08T05:41:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="系统">系统</h2>
<h3 id="dozer">Dozer</h3>
<p><code>brew cask install dozer</code></p>
<p>折叠状态栏菜单，与之相对的一款收费软件为 <code>Bartender</code></p>
<h3 id="spectacle">Spectacle</h3>
<p><code>brew cask install spectacle</code></p>
<p>快捷改变窗口尺寸，功能类似 <code>Magnet</code></p>
<h3 id="scroll-reverser">Scroll Reverser</h3>
<p><code>brew cask install scroll-reverser</code></p>
<p>翻转滚轮方向</p>
<h3 id="karabiner-elements">Karabiner Elements</h3>
<p><code>brew cask install karabiner-elements</code></p>
<p>键盘重新映射</p>
<h3 id="tencent-lemon">Tencent Lemon</h3>
<p><code>brew cask install tencent-lemon</code></p>
<p>系统清理、网速硬盘等状态栏显示，相当于免费版 <code>CleanMyMac</code></p>
<h3 id="iina">iina</h3>
<p><code>brew cask install iina</code></p>
<p>播放器</p>
<h3 id="hand-brake">Hand Brake</h3>
<p><code>brew cask install handbrake</code></p>
<p>视频转码</p>
<h3 id="night-owl">Night Owl</h3>
<p><code>brew cask install nightowl</code></p>
<p>定时自动切换黑暗模式</p>
<h3 id="tunnel-blick">Tunnel Blick</h3>
<p><code>brew cask install tunnelblick-beta</code></p>
<p>VPN 连接</p>
<h2 id="写作">写作</h2>
<h3 id="typora">Typora</h3>
<p><code>brew cask install typora</code></p>
<p>Markdown 编辑器，干净，全平台支持，免费软件中最佳</p>
<h3 id="mweb">mweb</h3>
<p><code>brew cask install mweb</code></p>
<p>Markdown 编辑器，分类功能比较强，原生开发性能较高</p>
<h3 id="pdf-expert">Pdf Expert</h3>
<p><code>brew cask install pdf-expert</code></p>
<p>pdf 阅读器</p>
<h2 id="开发">开发</h2>
<h3 id="iterm2">iTerm2</h3>
<p><code>brew cask install iterm2</code></p>
<p>终端模拟器</p>
<h3 id="visual-studio-code">Visual Studio Code</h3>
<p><code>brew cask install visual-sdudio-code</code></p>
<p>代码编辑器</p>
<h3 id="sequel-pro">Sequel Pro</h3>
<p><code>brew cask install sequel-pro-nightly</code></p>
<p>MySQL 可视化工具</p>
<h3 id="vmware-fusion">Vmware Fusion</h3>
<p><code>brew cask install vmware-fusion</code></p>
<p>Vmware 虚拟机</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac 开发环境搭建]]></title>
        <id>https://m01i0ng.js.org/mac-kai-fa-huan-jing-da-jian/</id>
        <link href="https://m01i0ng.js.org/mac-kai-fa-huan-jing-da-jian/">
        </link>
        <updated>2020-02-08T05:40:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="系统配置优化">系统配置优化</h2>
<h3 id="触摸板控制优化开启轻按点击功能">触摸板控制优化，开启轻按点击功能</h3>
<pre><code class="language-bash">defaults write com.apple.AppleMultitouchTrackpad Clicking -int 1
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

# 开启三指拖拽
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadThreeFingerDrag -bool true
defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerDrag -bool true
</code></pre>
<h3 id="将-f1-f12-用做标准功能键">将 F1-F12 用做标准功能键</h3>
<pre><code class="language-bash">defaults write -globalDomain com.apple.keyboard.fnState -int 1
</code></pre>
<h3 id="关闭-sip">关闭 SIP</h3>
<p>重启，按住 <code>cmd+r</code>，进入恢复模式，实用工具-终端，执行</p>
<pre><code class="language-bash">csrutil disable
</code></pre>
<h3 id="关闭第三方程序验证">关闭第三方程序验证</h3>
<p>我们或多或少会下载某些破解版的应用，此时直接打开很可能被系统拒绝，或者报错：无法打开已损坏的安装包。我们可以通过命令行关闭这一保（限）护（制）：</p>
<pre><code class="language-bash">sudo spctl --master-disable
defaults write com.apple.LaunchServices LSQuarantine -bool false
</code></pre>
<h3 id="关闭镜像验证">关闭镜像验证</h3>
<p>在打开 .dmg 格式的安装文件时，默认会先验证镜像，如果文件本身很大，验证的时间会很长，可以输入以下命令关闭验证：</p>
<pre><code class="language-bash">defaults write com.apple.frameworks.diskimages skip-verify -bool true
defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true
defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true
</code></pre>
<h3 id="完全键盘控制">完全键盘控制</h3>
<p>很多操作都会弹出系统的对话框，要求我们确认或者取消，如果没有开启完全键盘控制，我们只能按回车键确认，或者移动鼠标选择取消。如果开启了完全键盘控制，只要按下空格键，就相当于选中蓝色边框的按钮。按下 Tab 键可以在多个按钮之间切换。</p>
<pre><code class="language-bash">defaults write NSGlobalDomain AppleKeyboardUIMode -int 3
</code></pre>
<h3 id="finder-快速预览增强">Finder 快速预览增强</h3>
<blockquote>
<p>需要先安装 brew</p>
</blockquote>
<pre><code class="language-bash">brew cask install qlcolorcode qlgradle qlmarkdown qlstephen qlvideo quicklook-json quicklookapk webpquicklook
</code></pre>
<h2 id="brew">Brew</h2>
<p>*nix 都有自带的包管理，用于管理软件包之间的依赖，如 RHEL 的 <code>yum</code>、Debian 的 <code>apt</code>，Mac 本身没有自带的包管理，单有这个第三方的实现 —— <code>HomeBrew</code>，一行命令安装：</p>
<pre><code class="language-bash">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre>
<p>安装过程中需要输入密码并下载 <code>Command Line Tools</code>，视网络情况快慢不一</p>
<h3 id="更换镜像源">更换镜像源</h3>
<p>Brew 自带的镜像源位于国外，不挂代理可能会很慢，这里推荐更换国内的阿里云镜像源：</p>
<pre><code class="language-bash"># 替换核心库:
cd &quot;$(brew --repo)&quot;
git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git

cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;
git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git

brew update
# 替换homebrew-bottles:
echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles' &gt;&gt; ~/.bash_profile
source ~/.bash_profile
</code></pre>
<h3 id="安装命令行工具">安装命令行工具</h3>
<p>基本的命令行工具可以直接用 <code>brew install</code> 安装，更多子命令直接执行 <code>brew</code> 即可查看：</p>
<pre><code class="language-bash">brew install vim wget curl git 
</code></pre>
<h3 id="安装一般图形化软件">安装一般图形化软件</h3>
<p>如微信、QQ 或是 Intellij Idea 等开发工具，也可以用 Brew 安装：</p>
<pre><code class="language-bash">brew cask install wechat qq intellij-idea
</code></pre>
<h3 id="查找">查找</h3>
<p>执行 <code>brew search xxx</code> 即可从软件源中查找，之后从结果列表中取名字安装即可，其中 <code>Formulae</code> 子项下的 <code>brew install xxx</code>，<code>Casks</code> 子项下的 <code>brew cask install xxx</code></p>
<h2 id="oh-my-zsh">Oh My Zsh</h2>
<p>此处引官方描述：</p>
<pre><code>Oh My Zsh is a delightful, open source, community-driven framework for managing your Zsh configuration. It comes bundled with thousands of helpful functions, helpers, plugins, themes, and a few things that make you shout...
</code></pre>
<p>简单说是对默认终端的一个功能增强，还是极大的增强，可以添加各种自定义主题插件等，一行命令安装：</p>
<pre><code class="language-bash">brew install zsh
sh -c &quot;$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;
</code></pre>
<blockquote>
<p>注意使用 zsh 之后需要将以前 ~/.bash_profile ~/.bashrc 设置的环境变量等转移到 ~/.zshrc 中，例如上述的 echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.zshrc</p>
</blockquote>
<p>更多介绍和使用方法<a href="https://github.com/robbyrussell/oh-my-zsh/">点击</a>查看</p>
<p>这里推荐几个很好用的插件：<a href="https://github.com/zsh-users">Zsh Users</a></p>
<ul>
<li>命令语法高亮</li>
</ul>
<pre><code class="language-bash">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
</code></pre>
<p><code>plugins=( [plugins...] zsh-syntax-highlighting)</code></p>
<ul>
<li>命令自动补全</li>
</ul>
<pre><code class="language-bash">git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
</code></pre>
<p><code>plugins=( [plugins...] zsh-autosuggestions)</code></p>
<h2 id="其他开发环境">其他开发环境</h2>
<h3 id="node">Node</h3>
<h4 id="版本管理">版本管理</h4>
<p><a href="http://nvm.sh">nvm</a></p>
<pre><code class="language-bash">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | zsh
</code></pre>
<h4 id="镜像">镜像</h4>
<p><code>npm i -g mirror-config-china</code> 配置所有中文镜像</p>
<h3 id="python">Python</h3>
<h4 id="版本管理-2">版本管理</h4>
<p><a href="https://github.com/pyenv/pyenv">pyenv</a></p>
<pre><code class="language-bash">brew install pyenv
</code></pre>
<h4 id="pypi-镜像">pypi 镜像</h4>
<p>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</p>
<h3 id="java-kotlin-scala-maven-gradle">Java、Kotlin、Scala、Maven、Gradle</h3>
<h4 id="版本管理-3">版本管理</h4>
<p><a href="https://sdkman.io/install">sdkman</a></p>
<pre><code class="language-bash">curl -s &quot;https://get.sdkman.io&quot; | zsh
</code></pre>
<h4 id="镜像-2">镜像</h4>
<p>Maven 使用阿里云镜像：</p>
<p>全局</p>
<pre><code class="language-bash">vim ~/.m2/settings.xml
</code></pre>
<pre><code class="language-xml">&lt;settings&gt;
    &lt;mirrors&gt;
        &lt;mirror&gt;
            &lt;id&gt;aliyunmaven&lt;/id&gt;
            &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;
            &lt;name&gt;阿里云公共仓库&lt;/name&gt;
            &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;
        &lt;/mirror&gt;
    &lt;/mirrors&gt;
&lt;/settings&gt;
</code></pre>
<p>项目级</p>
<p><code>pom.xml</code></p>
<pre><code class="language-xml">&lt;repositories&gt;
    &lt;repository&gt;
        &lt;id&gt;aliyunmaven&lt;/id&gt;
        &lt;name&gt;阿里云公共仓库&lt;/name&gt;
        &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;
    &lt;/repository&gt;
&lt;/repositories&gt;
</code></pre>
<p>Gradle 使用阿里云镜像：</p>
<p>全局</p>
<pre><code class="language-bash">vim ~/.gradle/init.gradle
</code></pre>
<pre><code class="language-groovy">allprojects {
    repositories {
        def ALIYUN_REPOSITORY_URL = 'http://maven.aliyun.com/nexus/content/groups/public'
        def ALIYUN_JCENTER_URL = 'http://maven.aliyun.com/nexus/content/repositories/jcenter'
        all { ArtifactRepository repo -&gt;
            if(repo instanceof MavenArtifactRepository){
                def url = repo.url.toString()
                if (url.startsWith('https://repo1.maven.org/maven2')) {
                    project.logger.lifecycle &quot;Repository ${repo.url} replaced by $ALIYUN_REPOSITORY_URL.&quot;
                    remove repo
                }
                if (url.startsWith('https://jcenter.bintray.com/')) {
                    project.logger.lifecycle &quot;Repository ${repo.url} replaced by $ALIYUN_JCENTER_URL.&quot;
                    remove repo
                }
            }
        }
        maven {
            url ALIYUN_REPOSITORY_URL
            url ALIYUN_JCENTER_URL
        }
    }
}
</code></pre>
<p>项目级</p>
<p><code>build.gradle</code></p>
<pre><code class="language-groovy">
buildscript {
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'}
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }        
}

allprojects {
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'}
    }
}
</code></pre>
<h3 id="ruby">Ruby</h3>
<h4 id="版本管理-4">版本管理</h4>
<p><a href="https://github.com/rbenv/rbenv">rbenv</a></p>
<pre><code class="language-bash">brew install rbenv
</code></pre>
<h4 id="镜像-3">镜像</h4>
<pre><code class="language-bash"># 添加 TUNA 源并移除默认源
gem sources --add https://mirrors.tuna.tsinghua.edu.cn/rubygems/ --remove https://rubygems.org/
# 列出已有源
gem sources -l
# 应该只有 TUNA 一个
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux 归纳]]></title>
        <id>https://m01i0ng.js.org/linux-gui-na/</id>
        <link href="https://m01i0ng.js.org/linux-gui-na/">
        </link>
        <updated>2020-02-08T05:40:16.000Z</updated>
        <content type="html"><![CDATA[<h2 id="系统优化">系统优化</h2>
<h3 id="ct-7-磁盘扩容">CT 7 磁盘扩容</h3>
<blockquote>
<p>场景：VM 虚拟机磁盘分配不足后期添加并扩容至主分区</p>
</blockquote>
<ul>
<li>查看系统挂载信息</li>
</ul>
<p><code>df -h</code></p>
<ul>
<li>
<p>在 VM 设置中扩展磁盘</p>
</li>
<li>
<p>对新增加的硬盘进行分区、格式化</p>
</li>
</ul>
<pre><code class="language-bash"># 我们增加了空间的硬盘是 /dev/sda

# 分区：
[root@localhost]# fdisk /dev/sda　　　　
p　　　　　　　查看已分区数量（我看到有两个 /dev/sda1 /dev/sda2）
n　　　　　　　新增加一个分区
p　　　　　　　分区类型我们选择为主分区
　　　　　　     分区号输入3（因为1,2已经用过了,sda1是分区1,sda2是分区2,sda3分区3）
回车　　　　　  默认（起始扇区）
回车　　　　　  默认（结束扇区）
t　　　　　　　 修改分区类型
　　　　　　     选分区3
8e　　　　　 　修改为LVM（8e就是LVM）
w　　　　　  　写分区表
q　　　　　  　完成，退出fdisk命令

# 使用partprobe 命令 或者重启机器 

# 格式化分区3命令:

mkfs.ext3 /dev/sda3
</code></pre>
<ul>
<li>添加新 LVM 至已有 LVM 组，实现扩容</li>
</ul>
<pre><code class="language-bash">lvm　　　　　　　　　　　　           进入lvm管理

lvm&gt;pvcreate /dev/sda3　　           这是初始化刚才的分区3

lvm&gt;vgextend centos /dev/sda3     将初始化过的分区加入到虚拟卷组centos (卷和卷组的命令可以通过 vgdisplay )

lvm&gt;vgdisplay -v 或 者vgdisplay 查看 free PE /Site

lvm&gt;lvextend -l+6143 /dev/mapper/centos-root　　扩展已有卷的容量（6143 是通过vgdisplay查看free PE /Site的大小）

lvm&gt;pvdisplay 查看卷容量，这时你会看到一个很大的卷了

lvm&gt;quit 　退出
</code></pre>
<p>接着输入以下命令：</p>
<p><code>xfs_growfs /dev/mapper/centos-root</code></p>
<p>重复执行 <code>df -h</code> 验证</p>
<h3 id="添加-swap-空间">添加 Swap 空间</h3>
<ul>
<li>制作 Swapfile 文件</li>
</ul>
<p>Linux：<code>fallocate -l 4G /swapfile &amp;&amp; chmod 600 /swapfile</code></p>
<p>CentOS：<code>dd if=/dev/zero of=/swapfile count=4096 bs=1MiB &amp;&amp; chmod 600 /swapfile</code></p>
<ul>
<li>格式化交换空间</li>
</ul>
<p><code>mkswap /swapfile</code></p>
<ul>
<li>开启交换空间</li>
</ul>
<p><code>swapon /swapfile</code></p>
<ul>
<li>开机自动挂载</li>
</ul>
<p><code>vim /etc/fstab</code> 把原有交换空间文件替换为新的</p>
<h3 id="设置时区">设置时区</h3>
<ul>
<li>查看可用时区</li>
</ul>
<p><code>timedatectl list-timezones</code></p>
<ul>
<li>设置时区</li>
</ul>
<p><code>timedatectl set-timezone Asia/Shanghai</code></p>
<ul>
<li>更新</li>
</ul>
<p><code>timedatectl</code></p>
<h3 id="设置-ntp">设置 NTP</h3>
<ul>
<li>安装 NTP</li>
</ul>
<p><code>yum install -y ntp</code></p>
<ul>
<li>开启</li>
</ul>
<p><code>systemctl start ntpd &amp;&amp; systemctl enable ntpd</code></p>
]]></content>
    </entry>
</feed>